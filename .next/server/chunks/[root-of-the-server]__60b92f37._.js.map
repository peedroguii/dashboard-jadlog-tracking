{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/tracking/batch/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nconst JADLOG_API_URL = 'https://prd-traffic.jadlogtech.com.br/embarcador/api/tracking/simples/consultar';\nconst BATCH_SIZE = 100; // Máximo permitido pela API da Jadlog\nconst DELAY_BETWEEN_BATCHES = 2000; // 2 segundos entre lotes para evitar rate limiting\n\ninterface BatchResult {\n  numeroOperacional: string;\n  success: boolean;\n  tracking?: {\n    status: string;\n    ultimaAtualizacao: string;\n    previsaoEntrega?: string;\n    eventos: Array<{\n      data: string;\n      status: string;\n      unidade: string;\n    }>;\n  };\n  error?: string;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { numeroOperacionais } = await request.json();\n\n    if (!numeroOperacionais || !Array.isArray(numeroOperacionais)) {\n      return NextResponse.json(\n        { error: 'Lista de números operacionais é obrigatória' },\n        { status: 400 }\n      );\n    }\n\n    if (numeroOperacionais.length === 0) {\n      return NextResponse.json({ results: [] });\n    }\n\n    // Dividir em lotes de acordo com o limite da API\n    const batches = [];\n    for (let i = 0; i < numeroOperacionais.length; i += BATCH_SIZE) {\n      batches.push(numeroOperacionais.slice(i, i + BATCH_SIZE));\n    }\n\n    const allResults: BatchResult[] = [];\n    let processedCount = 0;\n\n    // Processar cada lote com delay\n    for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {\n      const batch = batches[batchIndex];\n      \n      try {\n        // Preparar consulta para o lote atual\n        const consulta = batch.map(numeroOperacional => ({\n          pedido: numeroOperacional\n        }));\n\n        // Fazer chamada para a API da Jadlog\n        const response = await fetch(JADLOG_API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${process.env.JADLOG_API_TOKEN || 'demo-token'}`\n          },\n          body: JSON.stringify({ consulta })\n        });\n\n        if (!response.ok) {\n          console.error(`Erro na API Jadlog para lote ${batchIndex + 1}:`, response.status);\n          // Adicionar resultados de erro para este lote\n          batch.forEach(numeroOperacional => {\n            allResults.push({\n              numeroOperacional,\n              success: false,\n              error: `Erro HTTP ${response.status}`\n            });\n          });\n        } else {\n          const data = await response.json();\n          \n          // Processar resultados do lote\n          if (data.consulta && Array.isArray(data.consulta)) {\n            data.consulta.forEach((item: any, index: number) => {\n              const numeroOperacional = batch[index];\n              \n              if (item.tracking) {\n                allResults.push({\n                  numeroOperacional,\n                  success: true,\n                  tracking: {\n                    status: item.tracking.status || 'Não disponível',\n                    ultimaAtualizacao: item.tracking.dtEmissao || new Date().toLocaleDateString('pt-BR'),\n                    previsaoEntrega: item.previsaoEntrega,\n                    eventos: item.tracking.eventos || []\n                  }\n                });\n              } else {\n                allResults.push({\n                  numeroOperacional,\n                  success: false,\n                  error: 'Tracking não encontrado'\n                });\n              }\n            });\n          } else {\n            // Se não há dados de consulta, marcar todos como erro\n            batch.forEach(numeroOperacional => {\n              allResults.push({\n                numeroOperacional,\n                success: false,\n                error: 'Resposta inválida da API'\n              });\n            });\n          }\n        }\n\n        processedCount += batch.length;\n\n        // Delay entre lotes (exceto no último)\n        if (batchIndex < batches.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_BATCHES));\n        }\n\n      } catch (error) {\n        console.error(`Erro ao processar lote ${batchIndex + 1}:`, error);\n        // Adicionar resultados de erro para este lote\n        batch.forEach(numeroOperacional => {\n          allResults.push({\n            numeroOperacional,\n            success: false,\n            error: 'Erro de conexão'\n          });\n        });\n      }\n    }\n\n    return NextResponse.json({\n      results: allResults,\n      summary: {\n        total: numeroOperacionais.length,\n        processed: processedCount,\n        successful: allResults.filter(r => r.success).length,\n        failed: allResults.filter(r => !r.success).length,\n        batches: batches.length\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro na API de consulta em lote:', error);\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}